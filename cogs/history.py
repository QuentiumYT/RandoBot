import nextcord, re
from nextcord.ext import commands

from cogs.utils import config

class HistoryCommand(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @nextcord.slash_command(
        name="history",
        description="Affiche l'historique des randonnées",
        guild_ids=[380373195473027074, 950693381686837248],
    )
    async def history_cmd(self, ctx: nextcord.Interaction):
        # Get all hikes from announcement channel
        announcement_channel = nextcord.utils.get(ctx.guild.channels, name=config["channel_announcements"])

        history = {}
        async for hike in announcement_channel.history(limit=999999):
            # Message is a hike with 3 reactions status
            if len(hike.reactions) == 3 and isinstance(hike.reactions[0].emoji, (nextcord.Emoji, nextcord.PartialEmoji)):
                # Old hikes without embed written as text
                if hike.content:
                    name = re.findall(r"Lieu\s*: (.+)", hike.content)
                # New hikes with embed generated by the bot
                elif len(hike.embeds) > 0:
                    name = re.findall(r"\*\*Lieu\*\*: (.+)", hike.embeds[0].description)
                else:
                    continue

                history[hike.id] = {
                    "name": name[0] if name else "Lieu non défini",
                    "participants": hike.reactions[0].count - 1,
                }

        # Reverse history to get last hikes first
        history = dict(reversed(list(history.items())))

        # Send embed message with the list
        embed = nextcord.Embed(color=0x14F5F5)
        embed.title = "Liste des randos organisées"
        if history:
            embed.description = "- " + "\n- ".join([f"{x['name']} ({x['participants']} participants)" for x in history.values()])
        else:
            embed.description = "Aucun historique pour le moment"
        embed.set_footer(text="By RandoBot")

        await ctx.send(embed=embed)

def setup(bot):
    bot.add_cog(HistoryCommand(bot))
